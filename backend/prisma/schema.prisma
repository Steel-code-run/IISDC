// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model grants {
  id                Int                @id @unique @default(autoincrement())
  namePost          String             @db.LongText()
  dateCreationPost  String?
  directions        grants_direction[]
  organization      String?
  deadline          DateTime?
  summary           String?
  directionForSpent String?
  fullText          String?            @db.LongText()
  link              String?
  linkPDF           String?
  sourceLink        String?
  timeOfParse       DateTime
  blackListed       Int                @default(0)
  // События редактирования
  editActions       users_actions[]
  parser            parsers?           @relation(fields: [parser_id], references: [id])
  parser_id         Int?
}

model competitions {
  id                       Int                    @id @unique @default(autoincrement())
  namePost                 String                 @db.VarChar(255)
  dateCreationPost         String
  direction                competitions_direction @relation(fields: [competitions_directionId], references: [id])
  organization             String
  deadline                 DateTime
  summary                  String
  directionForSpent        String
  fullText                 String                 @db.LongText()
  link                     String
  linkPDF                  String
  sourceLink               String
  timeOfParse              DateTime
  blackListed              Int                    @default(0)
  // События редактирования
  editActions              users_actions[]
  competitions_directionId Int
  parser                   parsers?               @relation(fields: [parser_id], references: [id])
  parser_id                Int
}

model users {
  id              Int             @id @unique @default(autoincrement())
  name            String          @unique
  email           String
  password        String
  role            users_role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId          Int
  blocked         Boolean         @default(false)
  User_actions    users_actions[] @relation("User_actions")
  User_actionsFor users_actions[] @relation("User_actionsFor")
  User_telegram   users_telegram? @relation(fields: [user_telegramId], references: [id])
  user_telegramId Int?
  acessing_log    acessing_logs[]
}

model users_telegram {
  id          Int                      @id @unique @default(autoincrement())
  telegram_id String
  key         String
  User        users[]
  settigns    users_telegram_settings? @relation(fields: [settingsId], references: [id])
  settingsId  Int?
}

model users_actions {
  id                Int                 @id @unique @default(autoincrement())
  // от какого пользователя
  user_id           Int
  user              users               @relation("User_actions", fields: [user_id], references: [id])
  // информация о действии
  ip                String
  date              String
  actionType        users_actions_types
  // Суда пишем о том что изменилось, что произошло, что было раньше, причину и тд
  actionDescription String?
  // с каким юзером связано действие
  actionForUser     users?              @relation("User_actionsFor", fields: [actionForUserId], references: [id])
  actionForUserId   Int?
  // с каким грантом связано действие
  Grant             grants?             @relation(fields: [grantId], references: [id])
  grantId           Int?
  // с каким конкурсом связано действие
  Competition       competitions?       @relation(fields: [competitionId], references: [id])
  competitionId     Int?
}

model users_telegram_settings {
  id                      Int                      @id @unique @default(autoincrement())
  workTime                DateTime
  grants_directions       grants_direction[]
  competitions_directions competitions_direction[]
  User_telegram           users_telegram[]
}

model grants_direction {
  id                     Int                       @id @unique @default(autoincrement())
  name                   String
  Grant                  grants[]
  User_telegram_settings users_telegram_settings[]
}

model acessing_logs {
  id     Int      @id @unique @default(autoincrement())
  ip     String
  date   DateTime
  User   users?   @relation(fields: [userId], references: [id])
  method String
  path   String
  userId Int?
}

model competitions_direction {
  id                     Int                       @id @unique @default(autoincrement())
  name                   String
  User_telegram_settings users_telegram_settings[]
  Competition            competitions[]
}

model users_role {
  id               Int                @id @unique @default(autoincrement())
  name             String             @unique
  User             users[]
  resources_access resources_access[]
}

enum users_actions_types {
  LOGIN
  LOGOUT
  VISITPAGE
  SENDREQUEST
  CHANGE_PASSWORD
  CHANGE_ROLE
  CHANGE_WORKTIME
  CHANGE_GRANTS_DIRECTIONS
  CHANGE_COMPETITIONS_DIRECTIONS
  CHANGE
  BLOCK
  UNBLOCK
  EDIT
}

model whitelist {
  id     Int    @id @unique @default(autoincrement())
  origin String @unique
}

model resources_access {
  id     Int        @id @unique @default(autoincrement())
  path   String
  role   users_role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int
}

model parsers {
  id            Int             @id @unique @default(autoincrement())
  name          String
  description   String?
  isEnabled     Boolean
  grant         grants[]
  competition   competitions[]
  parsing_queue parsing_queue[]
  pagesToParse  Int
}

model parsing_queue {
  id        BigInt   @id @unique @default(autoincrement())
  parser    parsers? @relation(fields: [parser_id], references: [id], onDelete: Cascade)
  parser_id Int
  page      Int
}

model appSettings {
  id                   Int    @id @unique @default(autoincrement())
  parsersWorkTimeStart DateTime
  parsersWorkTimeEnd   DateTime
  parsingEnabled       Boolean
  parsingInterval      DateTime
}